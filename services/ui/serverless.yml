# Refer to the README.md file in within this service directory to configure all ssm parameters required for this service.
service: ui

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  iam:
    role:
      path: ${env:IAM_PATH, ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
      permissionsBoundary: ${env:IAM_PERMISSIONS_BOUNDARY, ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}

plugins:
  - serverless-plugin-scripts
  - serverless-stack-termination-protection
  - serverless-iam-helper
  - serverless-s3-bucket-helper
  - "@enterprise-cmcs/serverless-waf-plugin"

s3BucketHelper:
  loggingConfiguration:
    destinationBucketName: ${env:LOGGING_BUCKET, ssm:/configuration/${self:custom.stage}/s3/accessLogsBucket, ssm:/configuration/default/s3/accessLogsBucket}
    logFilePrefix: ${env:LOGGING_BUCKET, ssm:/configuration/${self:custom.stage}/s3/accessLogsPrefix, ssm:/configuration/default/s3/accessLogsPrefix}

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  serverlessTerminationProtection:
    stages:
      - main
      - val
      - production
  route53HostedZoneId: ${ssm:/configuration/${self:custom.stage}/route53/hostedZoneId, ssm:/configuration/default/route53/hostedZoneId, ""}
  route53DomainName: ${ssm:/configuration/${self:custom.stage}/route53/domainName, ""}
  cloudfrontCertificateArn: ${ssm:/configuration/${self:custom.stage}/cloudfront/certificateArn, ssm:/configuration/default/cloudfront/certificateArn, ""}
  cloudfrontDomainName: ${ssm:/configuration/${self:custom.stage}/cloudfront/domainName, ""}
  vpnIpSetArn: ${ssm:/configuration/${self:custom.stage}/vpnIpSetArn, ssm:/configuration/default/vpnIpSetArn, ""}
  vpnIpv6SetArn: ${ssm:/configuration/${self:custom.stage}/vpnIpv6SetArn, ssm:/configuration/default/vpnIpv6SetArn, ""}
  firehoseStreamName: aws-waf-logs-${self:service}-${self:custom.stage}-firehose
  wafExcludeRules:
    wafScope: CLOUDFRONT
  wafPlugin:
    name: ${self:service}-${self:custom.stage}-webacl-waf
    rules:
      - enable: ${param:restrictToVpn}
        rule:
          Name: vpn-only
          Priority: 0
          Action:
            Allow: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: ${self:service}-${self:custom.stage}-webacl-vpn-only
          Statement:
            OrStatement:
              Statements:
                - IPSetReferenceStatement:
                    ARN: ${self:custom.vpnIpSetArn}
                - IPSetReferenceStatement:
                    ARN: !GetAtt GitHubIPSet.Arn
                - IPSetReferenceStatement:
                    ARN: ${self:custom.vpnIpv6SetArn}
      - enable: ${param:restrictToVpn}
        rule:
          Name: block-all-other-traffic
          Priority: 3
          Action:
            Block:
              CustomResponse:
                ResponseCode: 403
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: ${self:service}-${self:custom.stage}-block-traffic
          Statement:
            NotStatement:
              Statement:
                IPSetReferenceStatement:
                  ARN: ${self:custom.vpnIpSetArn}
  scripts:
    hooks:
      # Associate the WAF ACL with the Firehose Delivery Stream
      deploy:finalize: |
        wafAclArn=`aws wafv2 list-web-acls --scope CLOUDFRONT | jq -r '.WebACLs | .[] | select(.Name=="${self:custom.wafPlugin.name}") | .ARN'`
        firehoseStreamArn=`aws firehose describe-delivery-stream --delivery-stream-name ${self:custom.firehoseStreamName} | jq -r '.DeliveryStreamDescription.DeliveryStreamARN'`
        aws wafv2 put-logging-configuration \
          --logging-configuration ResourceArn=$wafAclArn,LogDestinationConfigs=$firehoseStreamArn \
          --region ${self:provider.region}
params:
  production:
    restrictToVpn: false
  val:
    restrictToVpn: false
  main:
    restrictToVpn: false
  default:
    restrictToVpn: false

resources:
  Conditions:
    CreateDnsRecord:
      Fn::And:
        - Fn::Not:
            - Fn::Equals:
                - ""
                - ${self:custom.route53HostedZoneId}
        - Fn::Not:
            - Fn::Equals:
                - ""
                - ${self:custom.route53DomainName}
    CreateCustomCloudFrontDomain:
      Fn::And:
        - Fn::Not:
            - Fn::Equals:
                - ""
                - ${self:custom.cloudfrontCertificateArn}
        - Fn::Not:
            - Fn::Equals:
                - ""
                - ${self:custom.cloudfrontDomainName}
  Resources:
    GitHubIPSet:
      Type: AWS::WAFv2::IPSet
      Properties:
        Name: ${self:custom.stage}-gh-ipset
        Scope: CLOUDFRONT
        IPAddressVersion: IPV4
        Addresses: []
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
      DeletionPolicy: Delete
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: "s3:GetObject"
              Resource: !Sub arn:aws:s3:::${S3Bucket}/*
              Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            - Sid: "AllowSSLRequestsOnly"
              Effect: Deny
              Action: "s3:*"
              Principal: "*"
              Resource:
                - !Sub arn:aws:s3:::${S3Bucket}/*
                - !Sub arn:aws:s3:::${S3Bucket}
              Condition:
                Bool:
                  aws:SecureTransport: false
        Bucket: !Ref S3Bucket
    LoggingBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: !Sub ${self:service}-${self:custom.stage}-cloudfront-logs-${AWS::AccountId}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: "AES256"
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerPreferred
      DeletionPolicy: Delete
    LoggingBucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: "s3:PutObject"
              Resource: !Sub arn:aws:s3:::${LoggingBucket}/*
              Principal:
                AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            - Sid: "AllowSSLRequestsOnly"
              Effect: Deny
              Action: "s3:*"
              Principal: "*"
              Resource:
                - !Sub arn:aws:s3:::${LoggingBucket}/*
                - !Sub arn:aws:s3:::${LoggingBucket}
              Condition:
                Bool:
                  aws:SecureTransport: false
        Bucket: !Ref LoggingBucket
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: OAI to prevent direct public access to the bucket
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: CloudFront Distro for the static website hosted in S3
          Aliases:
            Fn::If:
              - CreateCustomCloudFrontDomain
              - - ${self:custom.cloudfrontDomainName}
              - !Ref AWS::NoValue
          Origins:
            - DomainName: !GetAtt S3Bucket.DomainName
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
          Enabled: true
          HttpVersion: "http2"
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: !GetAtt CloudFormationHeadersPolicy.Id
          ViewerCertificate:
            Fn::If:
              - CreateCustomCloudFrontDomain
              - AcmCertificateArn: ${self:custom.cloudfrontCertificateArn}
                MinimumProtocolVersion: TLSv1.2_2021
                SslSupportMethod: sni-only
              - CloudFrontDefaultCertificate: true
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
          WebACLId: !GetAtt WafPluginAcl.Arn
          Logging:
            Bucket: !Sub "${LoggingBucket}.s3.amazonaws.com"
            Prefix: AWSLogs/CLOUDFRONT/${self:custom.stage}/
    Route53DnsRecord:
      Type: AWS::Route53::RecordSet
      Condition: CreateDnsRecord
      Properties:
        HostedZoneId: ${self:custom.route53HostedZoneId}
        Name: ${self:custom.route53DomainName}
        AliasTarget:
          DNSName: !GetAtt CloudFrontDistribution.DomainName
          HostedZoneId: Z2FDTNDATAQYW2
          EvaluateTargetHealth: false
        Type: A
    CloudFormationHeadersPolicy:
      Type: AWS::CloudFront::ResponseHeadersPolicy
      Properties:
        ResponseHeadersPolicyConfig:
          Name: Headers-Policy-${self:custom.stage}
          Comment: Add Security Headers
          SecurityHeadersConfig:
            ContentTypeOptions: # sets to nosniff
              Override: true
            StrictTransportSecurity:
              AccessControlMaxAgeSec: 63072000
              IncludeSubdomains: true
              Preload: true
              Override: true
            FrameOptions:
              FrameOption: "DENY"
              Override: true
            ContentSecurityPolicy:
              ContentSecurityPolicy:  "default-src 'self'; img-src 'self' data: https://www.google-analytics.com; script-src 'self' https://www.google-analytics.com https://ssl.google-analytics.com https://www.googletagmanager.com tags.tiqcdn.com tags.tiqcdn.cn tags-eu.tiqcdn.com https://*.adoberesources.net 'unsafe-inline'; style-src 'self' 'unsafe-inline'; connect-src https://*.amazonaws.com/ https://*.amazoncognito.com https://www.google-analytics.com https://*.launchdarkly.us https://adobe-ep.cms.gov https://adobedc.demdex.net; frame-ancestors 'none'; object-src 'none'"
              Override: true
            XSSProtection:
              Protection: false
              Override: true
    ###############This code block enables logging on waf and sends all logs to s3.##################################
    WaflogsUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub ${AWS::AccountId}-${self:service}-${self:custom.stage}-waflogs
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
    WaflogsUploadBucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "AllowSSLRequestsOnly"
              Effect: Deny
              Action: "s3:*"
              Principal: "*"
              Resource:
                - !Sub arn:aws:s3:::${WaflogsUploadBucket}/*
                - !Sub arn:aws:s3:::${WaflogsUploadBucket}
              Condition:
                Bool:
                  aws:SecureTransport: false
        Bucket: !Ref WaflogsUploadBucket
    Firehose:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamName: ${self:custom.firehoseStreamName}
        ExtendedS3DestinationConfiguration:
          RoleARN: !GetAtt DeliveryRole.Arn
          BucketARN: !GetAtt WaflogsUploadBucket.Arn
          Prefix: AWSLogs/WAF/${self:custom.stage}/
          BufferingHints:
            IntervalInSeconds: 300
            SizeInMBs: 5
          CompressionFormat: UNCOMPRESSED
    DeliveryRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: ""
              Effect: Allow
              Principal:
                Service: firehose.amazonaws.com
              Action: "sts:AssumeRole"
              Condition:
                StringEquals:
                  "sts:ExternalId": !Ref "AWS::AccountId"
    DeliveryPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: "firehose_delivery_policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "s3:AbortMultipartUpload"
                - "s3:GetBucketLocation"
                - "s3:GetObject"
                - "s3:ListBucket"
                - "s3:ListBucketMultipartUploads"
                - "s3:PutObject"
              Resource:
                - !Sub ${WaflogsUploadBucket.Arn}/*
                - !Sub ${WaflogsUploadBucket.Arn}/*
        Roles:
          - !Ref DeliveryRole
    ApplicationEndpointUrl:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:custom.stage}/ui/application_endpoint
        Type: String
        Value:
          Fn::If:
            - CreateCustomCloudFrontDomain
            - https://${self:custom.cloudfrontDomainName, ""}/
            - Fn::Join:
                - ""
                - - https://
                  - Fn::GetAtt:
                      - CloudFrontDistribution
                      - DomainName
                  - "/"
  Outputs:
    S3BucketName:
      Value: !Ref S3Bucket
    CloudFrontDistributionId:
      Value: !Ref CloudFrontDistribution
    CloudFrontEndpointUrl:
      Value: !Sub https://${CloudFrontDistribution.DomainName}
    ApplicationEndpointUrl:
      Value: !GetAtt ApplicationEndpointUrl.Value
