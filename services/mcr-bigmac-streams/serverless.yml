service: carts-bigmac-streams

frameworkVersion: "3"

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-plugin-scripts
  - serverless-online
  - serverless-iam-helper
  - serverless-s3-bucket-helper

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  kafkaConnectImage: ${ssm:/configuration/${self:custom.stage}/kafka_connect_image, ssm:/configuration/default/kafka_connect_image,"confluentinc/cp-kafka-connect:6.2.0"}
  bootstrapBrokerStringTls: ${ssm:/configuration/${self:custom.stage}/bigmac/bootstrapBrokerStringTls, ssm:/configuration/default/bigmac/bootstrapBrokerStringTls}
  vpcId: ${ssm:/configuration/${self:custom.stage}/vpc/id, ssm:/configuration/default/vpc/id}
  privateSubnets:
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/a/id, ssm:/configuration/default/vpc/subnets/private/a/id}
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/b/id, ssm:/configuration/default/vpc/subnets/private/b/id}
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/c/id, ssm:/configuration/default/vpc/subnets/private/c/id}
  stageEnrollmentCountsTableName: ${env:stageEnrollmentCountsTableName, cf:database-${self:custom.stage}.StageEnrollmentCountsTableName}
  stageEnrollmentCountsTableArn: ${env:stageEnrollmentCountsTableArn, cf:database-${self:custom.stage}.StageEnrollmentCountsTableArn}
  stateStatusTableStreamArn: ${env:stateStatusTableStreamArn, cf:database-${self:custom.stage}.StateStatusTableStreamArn}
  sectionTableStreamArn: ${env:sectionTableStreamArn, cf:database-${self:custom.stage}.SectionTableStreamArn}
  scripts:
    hooks:
      deploy:finalize: |
        serverless invoke --stage ${self:custom.stage} --function configureConnectors

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  iam:
    role:
      path: ${ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
      permissionsBoundary: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListShards
            - dynamodb:ListStreams
          Resource:
            - ${self:custom.stateStatusTableStreamArn}
            - ${self:custom.sectionTableStreamArn}

functions:
  configureConnectors:
    handler: handlers/configureConnectors.handler
    role: LambdaConfigureConnectorsRole
    environment:
      cluster: !Ref KafkaConnectCluster
      connectorPrefix: carts-${self:custom.stage}-
      sinkTopics: aws.mdct.seds.cdc.state-forms.v0
      jdbcSinkTopics: aws.mdct.seds.cdc.enrollment-counts.v0
      sinkFunctionArn: !GetAtt SinkEnrollmentCountsLambdaFunction.Arn
      sinkFunctionRegion: ${self:custom.region}
      BOOTSTRAP_BROKER_STRING_TLS: ${self:custom.bootstrapBrokerStringTls}
      STAGE: ${self:custom.stage}
    maximumRetryAttempts: 2
    timeout: 120
    vpc:
      securityGroupIds:
        - Ref: LambdaConfigureConnectorsSecurityGroup
      subnetIds: ${self:custom.privateSubnets}
  sinkEnrollmentCounts:
    handler: handlers/sinkEnrollmentCounts.handler
    role: SinkEnrollmentCountsRole
    environment:
      BOOTSTRAP_BROKER_STRING_TLS: ${self:custom.bootstrapBrokerStringTls}
      STAGE: ${self:custom.stage}
      TOPIC: aws.mdct.seds.cdc.enrollment-counts.v0
      stageEnrollmentCountsTableName: ${env:stageEnrollmentCountsTableName, cf:database-${self:custom.stage}.StageEnrollmentCountsTableName}
    maximumRetryAttempts: 2
    timeout: 120
    vpc:
      securityGroupIds:
        - Ref: LambdaConfigureConnectorsSecurityGroup
      subnetIds: ${self:custom.privateSubnets}
  postKafkaData:
    handler: handlers/kafka/post/postKafkaData.handler
    events:
      - stream:
          type: dynamodb
          arn: ${self:custom.stateStatusTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
      - stream:
          type: dynamodb
          arn: ${self:custom.sectionTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
    environment:
      BOOTSTRAP_BROKER_STRING_TLS: ${self:custom.bootstrapBrokerStringTls}
      STAGE: ${self:custom.stage}
    maximumRetryAttempts: 2
    timeout: 120
    memorySize: 2048
    vpc:
      securityGroupIds:
        - Ref: LambdaConfigureConnectorsSecurityGroup
      subnetIds: ${self:custom.privateSubnets}
resources:
  Conditions:
    CreatePermissionsBoundary:
      Fn::Not:
        - Fn::Equals:
            - ""
            - ${self:provider.iam.role.permissionsBoundary}
  Resources:
    KafkaConnectWorkerLogGroup:
      Type: "AWS::Logs::LogGroup"
      Properties:
        LogGroupName: /aws/fargate/${self:service}-${self:custom.stage}-kafka-connect
    KafkaConnectWorkerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security Group for the Fargate Connect Workers.
        VpcId: ${self:custom.vpcId}
    KafkaConnectWorkerSecurityGroupIngressLambda:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Sub "${KafkaConnectWorkerSecurityGroup}"
        IpProtocol: tcp
        FromPort: 8083
        ToPort: 8083
        SourceSecurityGroupId: !Sub "${LambdaConfigureConnectorsSecurityGroup}"
    KafkaConnectWorkerSecurityGroupIngressCluster:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Sub "${KafkaConnectWorkerSecurityGroup}"
        IpProtocol: tcp
        FromPort: 8083
        ToPort: 8083
        SourceSecurityGroupId: !Sub "${KafkaConnectWorkerSecurityGroup}"
    KafkaConnectWorkerRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "ecs.amazonaws.com"
                  - "ecs-tasks.amazonaws.com"
              Action: "sts:AssumeRole"
        Path: ${self:provider.iam.role.path}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - ${self:provider.iam.role.permissionsBoundary}
            - !Ref AWS::NoValue
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        Policies:
          - PolicyName: "LambdaRolePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "lambda:*"
                  Resource: !GetAtt SinkEnrollmentCountsLambdaFunction.Arn
    KafkaConnectWorkerTaskDefinition:
      Type: "AWS::ECS::TaskDefinition"
      Properties:
        ContainerDefinitions:
          - Name: ${self:service}-${self:custom.stage}-worker
            Image: ${self:custom.kafkaConnectImage}
            Memory: 4096
            Cpu: 2048
            Command:
              - bash
              - "-c"
              - |
                export CONNECT_REST_HOST_NAME=`curl $ECS_CONTAINER_METADATA_URI_V4 | sed -e 's/.*IPv4Addresses":\["\(.*\)"\],"AttachmentIndex.*/\1/'` &&
                export CONNECT_REST_ADVERTISED_HOST_NAME=$CONNECT_REST_HOST_NAME &&
                curl -k -SL -o /etc/kafka-connect/jars/postgresql-42.2.18.jar "https://jdbc.postgresql.org/download/postgresql-42.2.18.jar" &&
                chmod +x /etc/kafka-connect/jars/postgresql-42.2.18.jar &&
                curl -k -SL -o /etc/kafka-connect/jars/kafka-connect-lambda-1.2.2.jar "https://github.com/Nordstrom/kafka-connect-lambda/releases/download/v1.2.2/kafka-connect-lambda-1.2.2.jar" &&
                chmod +x /etc/kafka-connect/jaras/kafka-connect-lambda-1.2.2.jar
                curl -k -SL -o /etc/kafka-connect/jars/kafka-connect-jdbc-10.2.0.jar "https://packages.confluent.io/maven/io/confluent/kafka-connect-jdbc/10.2.0/kafka-connect-jdbc-10.2.0.jar" &&
                chmod +x /etc/kafka-connect/jars/kafka-connect-jdbc-10.2.0.jar &&
                /etc/confluent/docker/run
            Environment:
              - Name: CONNECT_BOOTSTRAP_SERVERS
                Value: >-
                  ${self:custom.bootstrapBrokerStringTls}
              - Name: CONNECT_GROUP_ID
                Value: mgmt.connect.cms-carts-seds.${self:service}-${self:custom.stage}
              - Name: CONNECT_CONFIG_STORAGE_TOPIC
                Value: mgmt.connect.cms-carts-seds.${self:service}-${self:custom.stage}.config
              - Name: CONNECT_OFFSET_STORAGE_TOPIC
                Value: mgmt.connect.cms-carts-seds.${self:service}-${self:custom.stage}.offsets
              - Name: CONNECT_STATUS_STORAGE_TOPIC
                Value: mgmt.connect.cms-carts-seds.${self:service}-${self:custom.stage}.status
              - Name: CONNECT_OFFSET_STORAGE_PARTITIONS
                Value: 5
              - Name: CONNECT_STATUS_STORAGE_PARTITIONS
                Value: 1
              - Name: CONNECT_KEY_CONVERTER
                Value: org.apache.kafka.connect.json.JsonConverter
              - Name: CONNECT_VALUE_CONVERTER
                Value: org.apache.kafka.connect.json.JsonConverter
              - Name: CONNECT_INTERNAL_KEY_CONVERTER
                Value: org.apache.kafka.connect.json.JsonConverter
              - Name: CONNECT_INTERNAL_VALUE_CONVERTER
                Value: org.apache.kafka.connect.json.JsonConverter
              - Name: CONNECT_PLUGIN_PATH
                Value: /usr/share/java,/etc/kafka-connect/jars
              - Name: CONNECT_SECURITY_PROTOCOL
                Value: SSL
              # Producer/Consumer configs below
              # Thank you to https://github.com/confluentinc/kafka-connect-jdbc/issues/161
              - Name: CONNECT_PRODUCER_BOOTSTRAP_SERVERS
                Value: >-
                  ${self:custom.bootstrapBrokerStringTls}
              - Name: CONNECT_PRODUCER_SECURITY_PROTOCOL
                Value: SSL
              - Name: CONNECT_CONSUMER_BOOTSTRAP_SERVERS
                Value: >-
                  ${self:custom.bootstrapBrokerStringTls}
              - Name: CONNECT_CONSUMER_SECURITY_PROTOCOL
                Value: SSL
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-region: !Sub "${AWS::Region}"
                awslogs-group: !Sub "${KafkaConnectWorkerLogGroup}"
                awslogs-stream-prefix: fargate
        Family: ${self:service}-${self:custom.stage}-kafka-connect-worker
        NetworkMode: awsvpc
        ExecutionRoleArn: !GetAtt KafkaConnectWorkerRole.Arn
        TaskRoleArn: !GetAtt KafkaConnectWorkerRole.Arn
        RequiresCompatibilities:
          - FARGATE
        Memory: 4GB
        Cpu: 2048
    KafkaConnectCluster:
      Type: "AWS::ECS::Cluster"
    KafkaConnectService:
      Type: "AWS::ECS::Service"
      Properties:
        Cluster: !Sub "${KafkaConnectCluster}"
        DeploymentConfiguration:
          MaximumPercent: 100
          MinimumHealthyPercent: 0
        LaunchType: FARGATE
        ServiceName: kafka-connect
        DesiredCount: 1
        TaskDefinition: !Sub "${KafkaConnectWorkerTaskDefinition}"
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            SecurityGroups:
              - !Sub "${KafkaConnectWorkerSecurityGroup}"
            Subnets: ${self:custom.privateSubnets}
    LambdaConfigureConnectorsSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security Group for configuring the connector.
        VpcId: ${self:custom.vpcId}
    SinkEnrollmentCountsRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Path: ${self:provider.iam.role.path}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - ${self:provider.iam.role.permissionsBoundary}
            - !Ref AWS::NoValue
        ManagedPolicyArns:
          - !Sub arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: "LambdaRolePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: "Allow"
                  Action:
                    - "ec2:CreateNetworkInterface"
                    - "ec2:DescribeNetworkInterfaces"
                    - "ec2:DetachNetworkInterface"
                    - "ec2:DeleteNetworkInterface"
                    - "ec2:DescribeSecurityGroups"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource: "*"
    LambdaConfigureConnectorsRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Path: ${self:provider.iam.role.path}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - ${self:provider.iam.role.permissionsBoundary}
            - !Ref AWS::NoValue
        Policies:
          - PolicyName: "LambdaRolePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: "Allow"
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DeleteNetworkInterface
                    - ec2:DetachNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DescribeSecurityGroups
                    - ec2:DescribeSubnets
                    - ec2:DescribeVpcs
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - ecs:ListTasks
                    - ecs:DescribeTasks
                  Resource: "*"
  Outputs:
    KafkaConnectWorkerSecurityGroupId:
      Description: |
        The ID of the security group attached to the Kafka Connect cluster tasks.
        This can be used by other resources to attach additional ingress rules.
      Value: !Ref KafkaConnectWorkerSecurityGroup
