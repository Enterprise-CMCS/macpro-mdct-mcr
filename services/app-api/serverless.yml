# Refer to the README.md file in within this service directory to configure all ssm parameters required for this service.
service: app-api

frameworkVersion: "3"

package:
  individually: true

plugins:
  - serverless-plugin-typescript
  - serverless-dotenv-plugin
  - serverless-plugin-warmup
  - serverless-associate-waf
  - serverless-stack-termination-protection
  - serverless-idempotency-helper
  - serverless-iam-helper
  - serverless-s3-bucket-helper
  - serverless-api-client-certificate
  - serverless-offline

s3BucketHelper:
  loggingConfiguration:
    destinationBucketName: ${env:LOGGING_BUCKET, ssm:/configuration/${self:custom.stage}/s3/accessLogsBucket, ssm:/configuration/default/s3/accessLogsBucket}
    logFilePrefix: ${env:LOGGING_BUCKET, ssm:/configuration/${self:custom.stage}/s3/accessLogsPrefix, ssm:/configuration/default/s3/accessLogsPrefix}

custom:
  serverlessPluginTypescript:
    tsConfigFileLocation: "./tsconfig.json"
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  serverlessTerminationProtection:
    stages:
      - main
      - val
      - production
  bannerTableName: ${env:BANNER_TABLE_NAME, cf:database-${self:custom.stage}.BannerTableName}
  mcparReportTableName: ${env:MCPAR_REPORT_TABLE_NAME, cf:database-${self:custom.stage}.McparReportTableName}
  templateBucket: ${env:TEMPLATE_BUCKET, cf:uploads-${self:custom.stage}.AttachmentsBucketName}
  webAclName: ${self:service}-${self:custom.stage}-webacl
  mcparFormBucket: ${env:MCPAR_FORM_BUCKET, cf:database-${self:custom.stage}.McparFormBucketName}
  princeApiHost: ${env:PRINCE_API_HOST, ssm:/${self:custom.stage}/prince_api_host, ssm:/default/prince_api_host}
  princeApiPath: ${env:PRINCE_API_PATH, ssm:/${self:custom.stage}/prince_api_path, ssm:/default/prince_api_path}
  associateWaf:
    name: ${self:custom.webAclName}
    version: V2
  serverlessApiClientCertificate:
    rotateCerts: true
    daysLeft: 30
  warmup:
    default:
      enabled: true
      prewarm: true
      events:
        - schedule: rate(${env:WARMUP_SCHEDULE, ssm:/configuration/${self:custom.stage}/warmup/schedule, ssm:/configuration/default/warmup/schedule}, "60 minutes")
      concurrency: ${env:WARMUP_CONCURRENCY, ssm:/configuration/${self:custom.stage}/warmup/concurrency, ssm:/configuration/default/warmup/concurrency, 5}
  authValue:
    main: aws_iam
    val: aws_iam
    production: aws_iam
provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  tracing:
    apiGateway: true
  logs:
    restApi: true
  iam:
    role:
      path: ${env:IAM_PATH, ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
      permissionsBoundary: ${env:IAM_PERMISSIONS_BOUNDARY, ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"
        - Effect: "Allow"
          Action:
            - ssm:GetParameter
          Resource: "*"
        - Effect: "Allow"
          Action:
            - execute-api:Invoke
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:ListBucket"
            - "s3:PutObject"
          Resource:
            - "arn:aws:s3:::${self:custom.templateBucket}"
            - "arn:aws:s3:::${self:custom.templateBucket}/templates/*"
            - "arn:aws:s3:::${self:custom.mcparFormBucket}"
            - "arn:aws:s3:::${self:custom.mcparFormBucket}/formTemplates/*"
            - "arn:aws:s3:::${self:custom.mcparFormBucket}/fieldData/*"
  environment:
    BANNER_TABLE_NAME: ${self:custom.bannerTableName}
    MCPAR_REPORT_TABLE_NAME: ${self:custom.mcparReportTableName}
    TEMPLATE_BUCKET: ${self:custom.templateBucket}
    MCPAR_FORM_BUCKET: ${self:custom.mcparFormBucket}
    STAGE: ${self:custom.stage}
    PRINCE_API_HOST: ${self:custom.princeApiHost}
    PRINCE_API_PATH: ${self:custom.princeApiPath}

functions:
  fetchBanner:
    handler: handlers/banners/fetch.fetchBanner
    events:
      - http:
          path: banners/{bannerId}
          method: get
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                bannerId: true
  createBanner:
    handler: handlers/banners/create.createBanner
    events:
      - http:
          path: banners/{bannerId}
          method: post
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                bannerId: true
  deleteBanner:
    handler: handlers/banners/delete.deleteBanner
    events:
      - http:
          path: banners/{bannerId}
          method: delete
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                bannerId: true
  fetchReport:
    handler: handlers/reports/fetch.fetchReport
    events:
      - http:
          path: reports/{state}/{id}
          method: get
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                state: true
                id: true
  fetchReportsByState:
    handler: handlers/reports/fetch.fetchReportsByState
    events:
      - http:
          path: reports/{state}
          method: get
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                state: true
    timeout: 30

  createReport:
    handler: handlers/reports/create.createReport
    events:
      - http:
          path: reports/{state}
          method: post
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                state: true
  updateReport:
    handler: handlers/reports/update.updateReport
    events:
      - http:
          path: reports/{state}/{id}
          method: put
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                state: true
                id: true
  fetchTemplate:
    handler: handlers/templates/fetch.fetchTemplate
    events:
      - http:
          path: templates/{templateName}
          method: get
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                templateName: true
  printPdf:
    handler: handlers/print/printPdf.printPdf
    timeout: 30
    events:
      - http:
          path: print_pdf
          method: post
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref ApiGatewayRestApi
    ApiGwWebAcl:
      Type: AWS::WAFv2::WebACL
      Properties:
        Name: ${self:custom.webAclName}
        DefaultAction:
          Block: {}
        Rules:
          - Action:
              Allow: {}
            Name: ${self:custom.webAclName}-allow-usa-plus-territories
            Priority: 0
            Statement:
              GeoMatchStatement:
                CountryCodes:
                  - GU # Guam
                  - PR # Puerto Rico
                  - US # USA
                  - UM # US Minor Outlying Islands
                  - VI # US Virgin Islands
                  - MP # Northern Mariana Islands
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: WafWebAcl
        Scope: REGIONAL
        VisibilityConfig:
          CloudWatchMetricsEnabled: true
          SampledRequestsEnabled: true
          MetricName: ${self:custom.stage}-webacl
  Outputs:
    ApiGatewayRestApiName:
      Value: !Ref ApiGatewayRestApi
    ApiGatewayRestApiUrl:
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}
    Region:
      Value: !Sub ${AWS::Region}
