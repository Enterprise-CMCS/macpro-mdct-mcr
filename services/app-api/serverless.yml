# Refer to the README.md file in within this service directory to configure all ssm parameters required for this service.
service: app-api

frameworkVersion: "4"

package:
  individually: true

build:
  esbuild:
    packages: external

plugins:
  - serverless-dotenv-plugin
  - serverless-associate-waf
  - "@enterprise-cmcs/serverless-waf-plugin"
  - serverless-stack-termination-protection
  - serverless-iam-helper
  - serverless-offline
  - serverless-plugin-common-excludes # this should go before serverless-plugin-include-dependencies

custom:
  project: "mcr"
  serverlessPluginTypescript:
    tsConfigFileLocation: "./tsconfig.json"
  stage: ${sls:stage}
  region: ${self:provider.region}
  wafPlugin:
    name: ${self:service}-${self:custom.stage}-webacl-waf
  wafExcludeRules:
    awsCommon:
      - "SizeRestrictions_BODY"
  serverlessTerminationProtection:
    stages:
      - main
      - val
      - production
  dotenv:
    path: ../../.env
  bannerTableName: ${env:BANNER_TABLE_NAME, param:BannerTableName}
  mcparReportTableName: ${env:MCPAR_REPORT_TABLE_NAME, param:McparReportTableName}
  mcparReportTableStreamArn: ${env:MCPAR_REPORT_TABLE_STREAM_ARN, param:McparReportTableStreamArn}
  mlrReportTableName: ${env:MLR_REPORT_TABLE_NAME, param:MlrReportTableName}
  formTemplateTableName: ${env:FORM_TEMPLATE_TABLE_NAME, param:FormTemplateTableName}
  mlrReportTableStreamArn: ${env:MLR_REPORT_TABLE_STREAM_ARN, param:MlrReportTableStreamArn}
  naaarReportTableName: ${env:NAAAR_REPORT_TABLE_NAME, param:NaaarReportTableName}
  naaarReportTableStreamArn: ${env:NAAAR_REPORT_TABLE_STREAM_ARN, param:NaaarReportTableStreamArn}
  templateBucket: ${env:TEMPLATE_BUCKET, param:AttachmentsBucketName}
  webAclName: ${self:service}-${self:custom.stage}-webacl-waf
  mcparFormBucket: ${env:MCPAR_FORM_BUCKET, param:McparFormBucketName}
  mlrFormBucket: ${env:MLR_FORM_BUCKET, param:MlrFormBucketName}
  naaarFormBucket: ${env:NAAAR_FORM_BUCKET, param:NaaarFormBucketName}
  bootstrapBrokerStringTls: ${env:BROKER_STRINGS, ssm:/configuration/${self:custom.stage}/bigmac/bootstrapBrokerStringTls, ssm:/configuration/default/bigmac/bootstrapBrokerStringTls}
  vpcId: ${env:VPC_ID, ssm:/configuration/${self:custom.stage}/vpc/id, ssm:/configuration/default/vpc/id}
  privateSubnets:
    - ${env:VPC_SUBNET_A, ssm:/configuration/${self:custom.stage}/vpc/subnets/private/a/id, ssm:/configuration/default/vpc/subnets/private/a/id}
    - ${env:VPC_SUBNET_B, ssm:/configuration/${self:custom.stage}/vpc/subnets/private/b/id, ssm:/configuration/default/vpc/subnets/private/b/id}
    - ${env:VPC_SUBNET_C, ssm:/configuration/${self:custom.stage}/vpc/subnets/private/c/id, ssm:/configuration/default/vpc/subnets/private/c/id}
  associateWaf:
    name: ${self:custom.webAclName}
    version: V2
params:
  main:
    topicNamespace: ""
  val:
    topicNamespace: ""
  production:
    topicNamespace: ""
  default:
    topicNamespace: --${self:custom.project}--${sls:stage}--
provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stackTags:
    PROJECT: ${self:custom.project}
    SERVICE: ${self:service}
  tracing:
    apiGateway: true
  logs:
    restApi: true
  iam:
    role:
      path: /delegatedadmin/developer/
      permissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/cms-cloud-admin/developer-boundary-policy
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"
        - Effect: "Allow"
          Action:
            - ssm:GetParameter
          Resource: "*"
        - Effect: "Allow"
          Action:
            - execute-api:Invoke
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:ListBucket"
            - "s3:PutObject"
          Resource:
            - "arn:aws:s3:::${self:custom.templateBucket}"
            - "arn:aws:s3:::${self:custom.templateBucket}/templates/*"
            - "arn:aws:s3:::${self:custom.mcparFormBucket}"
            - "arn:aws:s3:::${self:custom.mcparFormBucket}/formTemplates/*"
            - "arn:aws:s3:::${self:custom.mcparFormBucket}/fieldData/*"
            - "arn:aws:s3:::${self:custom.mlrFormBucket}"
            - "arn:aws:s3:::${self:custom.mlrFormBucket}/formTemplates/*"
            - "arn:aws:s3:::${self:custom.mlrFormBucket}/fieldData/*"
            - "arn:aws:s3:::${self:custom.naaarFormBucket}"
            - "arn:aws:s3:::${self:custom.naaarFormBucket}/formTemplates/*"
            - "arn:aws:s3:::${self:custom.naaarFormBucket}/fieldData/*"
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListShards
            - dynamodb:ListStreams
          Resource:
            - ${self:custom.mcparReportTableStreamArn}
            - ${self:custom.mlrReportTableStreamArn}
            - ${self:custom.naaarReportTableStreamArn}
  environment:
    BANNER_TABLE_NAME: ${self:custom.bannerTableName}
    BOOTSTRAP_BROKER_STRING_TLS: ${self:custom.bootstrapBrokerStringTls}
    MCPAR_REPORT_TABLE_NAME: ${self:custom.mcparReportTableName}
    MLR_REPORT_TABLE_NAME: ${self:custom.mlrReportTableName}
    NAAAR_REPORT_TABLE_NAME: ${self:custom.naaarReportTableName}
    FORM_TEMPLATE_TABLE_NAME: ${self:custom.formTemplateTableName}
    TEMPLATE_BUCKET: ${self:custom.templateBucket}
    MCPAR_FORM_BUCKET: ${self:custom.mcparFormBucket}
    MLR_FORM_BUCKET: ${self:custom.mlrFormBucket}
    NAAAR_FORM_BUCKET: ${self:custom.naaarFormBucket}
    STAGE: ${self:custom.stage}

functions:
  fetchBanner:
    handler: handlers/banners/fetch.fetchBanner
    events:
      - http:
          path: banners
          method: get
          cors: true
          authorizer: aws_iam
  createBanner:
    handler: handlers/banners/create.createBanner
    events:
      - http:
          path: banners
          method: post
          cors: true
          authorizer: aws_iam
  deleteBanner:
    handler: handlers/banners/delete.deleteBanner
    events:
      - http:
          path: banners/{bannerId}
          method: delete
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                bannerId: true
  fetchReport:
    handler: handlers/reports/fetch.fetchReport
    events:
      - http:
          path: reports/{reportType}/{state}/{id}
          method: get
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                reportType: true
                state: true
                id: true
  fetchReportsByState:
    handler: handlers/reports/fetch.fetchReportsByState
    events:
      - http:
          path: reports/{reportType}/{state}
          method: get
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                reportType: true
                state: true
    timeout: 30
  archiveReport:
    handler: handlers/reports/archive.archiveReport
    events:
      - http:
          path: reports/archive/{reportType}/{state}/{id}
          method: put
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                reportType: true
                state: true
                id: true
  releaseReport:
    handler: handlers/reports/release.releaseReport
    events:
      - http:
          path: reports/release/{reportType}/{state}/{id}
          method: put
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                state: true
                id: true
  createReport:
    handler: handlers/reports/create.createReport
    events:
      - http:
          path: reports/{reportType}/{state}
          method: post
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                reportType: true
                state: true
  updateReport:
    handler: handlers/reports/update.updateReport
    timeout: 30
    memorySize: 2048
    events:
      - http:
          path: reports/{reportType}/{state}/{id}
          method: put
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                reportType: true
                state: true
                id: true
  submitReport:
    handler: handlers/reports/submit.submitReport
    timeout: 30
    memorySize: 2048
    events:
      - http:
          path: reports/submit/{reportType}/{state}/{id}
          method: post
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                reportType: true
                state: true
                id: true
  fetchTemplate:
    handler: handlers/templates/fetch.fetchTemplate
    events:
      - http:
          path: templates/{templateName}
          method: get
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                templateName: true
  postKafkaData:
    handler: handlers/kafka/post/postKafkaData.handler
    environment:
      BOOTSTRAP_BROKER_STRING_TLS: ${self:custom.bootstrapBrokerStringTls}
      STAGE: ${self:custom.stage}
      topicNamespace: ${param:topicNamespace}
    maximumRetryAttempts: 2
    timeout: 120
    memorySize: 2048
    vpc:
      securityGroupIds:
        - Ref: KafkaSecurityGroup
      subnetIds: ${self:custom.privateSubnets}
    events:
      - stream:
          type: dynamodb
          arn: ${self:custom.mcparReportTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
      - stream:
          type: dynamodb
          arn: ${self:custom.mlrReportTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
      - stream:
          type: dynamodb
          arn: ${self:custom.naaarReportTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
  postNaaarBucketData:
    handler: handlers/kafka/post/postKafkaData.handler
    environment:
      BOOTSTRAP_BROKER_STRING_TLS: ${self:custom.bootstrapBrokerStringTls}
      STAGE: ${self:custom.stage}
      topicNamespace: ${param:topicNamespace}
    maximumRetryAttempts: 2
    timeout: 120
    memorySize: 2048
    vpc:
      securityGroupIds:
        - Ref: KafkaSecurityGroup
      subnetIds: ${self:custom.privateSubnets}
    events:
      - s3:
          bucket: ${self:custom.naaarFormBucket}
          existing: true
          forceDeploy: true
          event: s3:ObjectCreated:*
          rules:
            - prefix: fieldData/
            - suffix: .json
      - s3:
          bucket: ${self:custom.naaarFormBucket}
          existing: true
          forceDeploy: true
          event: s3:ObjectTagging:Put
          rules:
            - prefix: fieldData/
            - suffix: .json
  postMlrBucketData:
    handler: handlers/kafka/post/postKafkaData.handler
    environment:
      BOOTSTRAP_BROKER_STRING_TLS: ${self:custom.bootstrapBrokerStringTls}
      STAGE: ${self:custom.stage}
      topicNamespace: ${param:topicNamespace}
    maximumRetryAttempts: 2
    timeout: 120
    memorySize: 2048
    vpc:
      securityGroupIds:
        - Ref: KafkaSecurityGroup
      subnetIds: ${self:custom.privateSubnets}
    events:
      - s3:
          bucket: ${self:custom.mlrFormBucket}
          existing: true
          forceDeploy: true
          event: s3:ObjectCreated:*
          rules:
            - prefix: fieldData/
            - suffix: .json
      - s3:
          bucket: ${self:custom.mlrFormBucket}
          existing: true
          forceDeploy: true
          event: s3:ObjectTagging:Put
          rules:
            - prefix: fieldData/
            - suffix: .json
  postMcparBucketData:
    handler: handlers/kafka/post/postKafkaData.handler
    environment:
      BOOTSTRAP_BROKER_STRING_TLS: ${self:custom.bootstrapBrokerStringTls}
      STAGE: ${self:custom.stage}
      topicNamespace: ${param:topicNamespace}
    maximumRetryAttempts: 2
    timeout: 120
    memorySize: 2048
    vpc:
      securityGroupIds:
        - Ref: KafkaSecurityGroup
      subnetIds: ${self:custom.privateSubnets}
    events:
      - s3:
          bucket: ${self:custom.mcparFormBucket}
          existing: true
          forceDeploy: true
          event: s3:ObjectCreated:*
          rules:
            - prefix: fieldData/
            - suffix: .json
      - s3:
          bucket: ${self:custom.mcparFormBucket}
          existing: true
          forceDeploy: true
          event: s3:ObjectTagging:Put
          rules:
            - prefix: fieldData/
            - suffix: .json
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref ApiGatewayRestApi
    KafkaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security Group for streaming functions.  Egress all is set by default.
        VpcId: ${self:custom.vpcId}
  Outputs:
    ApiGatewayRestApiName:
      Value: !Ref ApiGatewayRestApi
    ApiGatewayRestApiUrl:
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}
    Region:
      Value: !Sub ${AWS::Region}
