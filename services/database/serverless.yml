service: database

frameworkVersion: "2"

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-stack-termination-protection
  - serverless-s3-bucket-helper
  - serverless-plugin-scripts
  - serverless-offline

s3BucketHelper:
  loggingConfiguration:
    destinationBucketName: ${ssm:/configuration/${self:custom.stage}/s3/accessLogsBucket~true, ssm:/configuration/default/s3/accessLogsBucket~true}
    logFilePrefix: ${ssm:/configuration/${self:custom.stage}/s3/accessLogsPrefix~true, ssm:/configuration/default/s3/accessLogsPrefix~true}

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  serverlessTerminationProtection:
    stages:
      - main
      - val
      - production
  bannerTableName: ${self:custom.stage}-banners
  mcparReportTableName: ${self:custom.stage}-mcpar-reports
  mcparFormBucket: !Sub ${env:MCPAR_FORM_BUCKET, ${self:service.name}-${self:custom.stage}-mcpar-${AWS::AccountId}}
  dataTransformEnabled: ${ssm:/configuration/${self:custom.stage}/enableTransformScript, ssm:/configuration/default/enableTransformScript, "false"}
  dataTransformUpdateEnabled: ${ssm:/configuration/${self:custom.stage}/executeDataUpdateInTransformScript, ssm:/configuration/default/executeDataUpdateInTransformScript, "false"}
  scripts:
    hooks:
      deploy:finalize: |
        serverless invoke --stage ${self:custom.stage} --function tfwsEtl
        if [ ${self:custom.dataTransformEnabled} = "true" ];
        then
          serverless invoke --stage ${self:custom.stage} --function dataTransform
        fi
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain:
        sources:
          - table: ${self:custom.mcparReportTableName}
            sources: [./seed-reports.json]

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  iam:
    role:
      path: ${ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
      permissionsBoundary: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:ListBucket"
            - "s3:PutObject"
          Resource:
            - "arn:aws:s3:::${self:custom.mcparFormBucket}"
            - "arn:aws:s3:::${self:custom.mcparFormBucket}/formTemplates/*"
            - "arn:aws:s3:::${self:custom.mcparFormBucket}/fieldData/*"
functions:
  dataTransform:
    handler: handlers/dataTransform/dataTransform.handler
    timeout: 120
    environment:
      DYNAMO_PREFIX: ${self:custom.stage}
      DATA_TRANSFORM_UPDATE_ENABLED: ${self:custom.dataTransformUpdateEnabled}
  tfwsEtl:
    handler: handlers/tfwsEtl/tfwsEtl.handler
    timeout: 300
    environment:
      MCPAR_REPORT_TABLE_NAME: ${self:custom.mcparReportTableName}
      MCPAR_FORM_BUCKET: ${self.custom.mcparFormBucket}
resources:
  Resources:
    BannerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.bannerTableName}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST # Set the capacity to auto-scale
    McparReportTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.mcparReportTableName}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: state
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: state
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST # Set the capacity to auto-scale
    McparFormBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub ${self:service.name}-${self:custom.stage}-mcpar-${AWS::AccountId}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
  Outputs:
    BannerTableName:
      Value: !Ref BannerTable
    BannerTableArn:
      Value: !GetAtt BannerTable.Arn
    BannerTableStreamArn:
      Value: !GetAtt BannerTable.StreamArn
    McparReportTableName:
      Value: !Ref McparReportTable
    McparReportTableArn:
      Value: !GetAtt McparReportTable.Arn
    McparReportTableStreamArn:
      Value: !GetAtt McparReportTable.StreamArn
    Region:
      Value: !Sub ${AWS::Region}
    McparFormBucketName:
      Value: !Ref McparFormBucket
    McparFormBucketArn:
      Value: !GetAtt McparFormBucket.Arn
