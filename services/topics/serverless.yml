service: ${self:custom.project}-topics

frameworkVersion: "3"

package:
  individually: true

plugins:
  - serverless-plugin-scripts
  - serverless-disable-functions
  - serverless-stack-termination-protection
  - serverless-bundle
  - "@stratiformdigital/serverless-iam-helper"
  - "@stratiformdigital/serverless-idempotency-helper"
  - "@stratiformdigital/serverless-online"
  - "@stratiformdigital/serverless-s3-security-helper"

provider:
  name: aws
  runtime: nodejs16.x
  region: ${env:REGION_A}
  stackTags:
    PROJECT: ${self:custom.project}
    SERVICE: ${self:service}
  iam:
    role:
      path: /delegatedadmin/developer/
      permissionsBoundary: arn:aws:iam::${aws:accountId}:policy/cms-cloud-admin/developer-boundary-policy

custom:
  project: ${env:PROJECT}
  serverlessTerminationProtection:
    stages: # Apply CloudFormation termination protection for these stages
      - main
      - val
      - production
  vpc: ${ssm:/aws/reference/secretsmanager/${self:custom.project}/${sls:stage}/vpc, ssm:/aws/reference/secretsmanager/${self:custom.project}/default/vpc}
  brokerString: ${ssm:/aws/reference/secretsmanager/${self:custom.project}/${sls:stage}/brokerString, ssm:/aws/reference/secretsmanager/${self:custom.project}/default/brokerString}
  scripts:
    hooks:
      deploy:finalize: |
        aws lambda invoke --region ${self:provider.region} --function-name ${self:service}-${sls:stage}-createTopics --invocation-type RequestResponse /dev/null > /dev/null

params:
  main:
    topicNamespace: ""
    deleteTopicsEnabled: true
  val:
    topicNamespace: ""
  production:
    topicNamespace: ""
  default:
    topicNamespace: --${self:custom.project}--${sls:stage}--
    deleteTopicsEnabled: false

functions:
  createTopics:
    handler: handlers/createTopics.handler
    maximumRetryAttempts: 0
    environment:
      brokerString: ${self:custom.brokerString}
      topicNamespace: ${param:topicNamespace}
    vpc:
      securityGroupIds:
        - Ref: LambdaSecurityGroup
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
    timeout: 60
  deleteTopics:
    handler: handlers/deleteTopics.handler
    maximumRetryAttempts: 0
    environment:
      brokerString: ${self:custom.brokerString}
    vpc:
      securityGroupIds:
        - Ref: LambdaSecurityGroup
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
    timeout: 300
    enabled: ${param:deleteTopicsEnabled}

resources:
  Resources:
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security Group for the lambdas
        VpcId: ${self:custom.vpc.id}
    LambdaSecurityGroupEgress:
      Type: AWS::EC2::SecurityGroupEgress
      Properties:
        GroupId: !Ref LambdaSecurityGroup
        IpProtocol: -1
        CidrIp: 0.0.0.0/0
