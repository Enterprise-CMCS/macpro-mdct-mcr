#!/bin/bash

set -eu -o pipefail

# this is the entrypoint for development. It wraps up compiling and calling run.ts
# all arguments, changes, etc. should be found in cli/run.ts

# this script checks for all the prereqs and then calls run.ts

export REGION_A=us-east-1
export PROJECT=mcr

# Utilities
require_cmd() {
  if ! command -v "$1" >/dev/null 2>&1; then
    echo "$1 not found on the system. $2" >&2
    exit 1
  fi
}

# check node exists
require_cmd node "Install version in .nvmrc. If using nvm, run 'nvm use'"

# check node version
if ! diff  <(cat .nvmrc | tr -d '\n') <(node -v | tr -d '\n') > /dev/null ; then
	echo "node version does not match the version required in .nvmrc"
	echo "If using nvm, run 'nvm use'"
	exit 1
fi

# check yarn exists
require_cmd yarn "On macOS, install with 'brew install yarn'"


# Parse arguments
UPDATE_ENV=false
LOCAL=false
ARGS=()

for arg in "$@"; do
    case $arg in
        update-env)
        UPDATE_ENV=true
        ;;
        local)
        LOCAL=true
        ;;
    esac
    ARGS+=("$arg")
done

if [ "$UPDATE_ENV" = true ]; then
    require_cmd op "Install 1Password CLI: 'brew install --cask 1password-cli'"
fi

if [ "$LOCAL" = true ]; then
    require_cmd docker "On macOS, install with 'brew install docker'"
    require_cmd colima "On macOS, install with 'brew install colima'"
    require_cmd localstack "On macOS, install with 'brew install localstack/tap/localstack-cli'"

    if ! colima status 2>&1 | grep -q "colima is running" ; then
        echo "colima installed but not running. We'll start it up for you now."
        colima start --cpu 4 --memory 10
    fi

    if ! localstack status | grep -q "running" ; then
        echo "localstack is installed but not running. We'll start it up for you now."
        localstack start > /dev/null 2>&1 &
    fi
fi

pushd cli
yarn install --frozen-lockfile
popd 

yarn install --frozen-lockfile

# run the CLI
yarn tsx cli/run.ts "${ARGS[@]-}"
