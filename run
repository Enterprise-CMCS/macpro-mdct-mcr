#!/bin/bash

set -eu -o pipefail

# this is the entrypoint for development. It wraps up compiling and calling run.ts
# all arguments, changes, etc. should be found in src/run.ts

# this script checks for all the prereqs and then calls run.ts

export REGION_A=us-east-1

# check node exists
if ! which node > /dev/null ; then
    echo "node not found on the system. Install version in .nvmrc based on instructions in README"
    exit 1
fi

# check node version
if ! diff .nvmrc <(node -v) > /dev/null ; then
    echo "Uh Oh! The current node version does not match the version required in .nvmrc"
    echo "If you have installed nvm, simply running 'nvm use' in this directory should solve the problem"
    echo "If you don't have nvm yet, the instructions in the README should sort you."
    echo "** Don't forget to add the bit to your shell profile **"
    exit 1
fi

# check yarn exists
if ! which yarn > /dev/null ; then
    echo "yarn not found on the system. On macOS, you can install it with 'brew install yarn'"
    exit 1
fi

# check serverless is installed globally.
if ! which serverless > /dev/null ; then
    echo "installing serverless globally"
    yarn global add serverless
fi

# have to ensure that yarn install is up to date.
# we use .yarn_install as a marker for the last time `yarn install` was run. Rerun the command when yarn.lock is updated
if [ "yarn.lock" -nt ".yarn_install" ]; then
    yarn install
    touch .yarn_install
fi

# Parse arguments
UPDATE_ENV=false
ARGS=()

for arg in "$@"; do
    case $arg in
        --update-env)
        UPDATE_ENV=true
        ;;
        *)
        ARGS+=("$arg")
        ;;
    esac
done

# Inject secrets to .env if the flag is set
if [ "$UPDATE_ENV" = true ]; then
    # Check if 1Password CLI is installed
    if ! which op > /dev/null; then
        echo "The MDCT team uses 1Password to store and retrieve development credentials. If you do not have a 1Password account please request one."
        exit 1
    fi
    
    # call 1password vault to retrieve secrets 
    op inject -i .env.tpl -o .env -f
    op inject -i services/ui-src/.env.tpl -o services/ui-src/.env -f
fi

# build and run run.ts
# tsc is configured to build what we expect in tsconfig.json
./node_modules/.bin/tsc && node ./build_dev/run.js "${ARGS[@]-}"
